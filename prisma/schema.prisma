generator client {
   provider = "prisma-client-js"
}

datasource db {
   provider = "mongodb"
   url      = env("DATABASE_URL")
}

model User {
   id                     String    @id @default(auto()) @map("_id") @db.ObjectId
   authId                 String    @unique // KindeAuth's string id
   email                  String?   @unique
   files                  File[]
   messages               Message[]
   stripeCustomerId       String?   @unique @map("stripe_customer_id")
   stripeSubscriptionId   String?   @unique @map("stripe_subscription_id")
   stripePriceId          String?   @map("strpe_price_id")
   stripeCurrentPeriodEnd DateTime? @map("stripe_current_period_end")
}

enum uploadStatus {
   PENDING
   PROCESSING
   FAILED
   SUCCESS
}

model File {
   id           String       @id @default(auto()) @map("_id") @db.ObjectId
   name         String
   uploadStatus uploadStatus @default(PENDING)
   url          String
   key          String
   messages     Message[]
   createdAt    DateTime     @default(now())
   updatedAt    DateTime     @updatedAt

   // Use a dedicated field for the foreign key referencing User.authId
   userAuthId String? // This field will store the KindeAuth id (a plain string)
   User       User?   @relation(fields: [userAuthId], references: [authId])
}

model Message {
   id            String   @id @default(auto()) @map("_id") @db.ObjectId
   text          String   @db.String
   isUserMessage Boolean
   createdAt     DateTime @default(now())
   updatedAt     DateTime @updatedAt

   // Relation to User using authId
   userAuthId String? // This field will store the KindeAuth id (a plain string)
   User       User?   @relation(fields: [userAuthId], references: [authId])

   // Relation to File uses File.id (a MongoDB ObjectId)
   fileId String? @db.ObjectId
   File   File?   @relation(fields: [fileId], references: [id])
}
